package bacci.giovanni.biogiova;

import java.util.LinkedHashMap;
import java.util.List;

import bacci.giovanni.biogiova.multialignment.AlignmentType;
import bacci.giovanni.biogiova.multialignment.matrices.ScoreMatricesType;
import bacci.giovanni.biogiova.multialignment.scoring.ScoreMatrix;
import bacci.giovanni.biogiova.multialignment.scoring.ScoreMatrixFactory;
import bacci.giovanni.biogiova.sequencing.AlignedSequences;
import bacci.giovanni.biogiova.sequencing.IdsMappedSequences;
import bacci.giovanni.biogiova.sequencing.SequencesType;

/**
 * Hello world!
 * 
 */
public class App {
	public static void main(String[] args) {
		LinkedHashMap<String, String> sequences1 = new LinkedHashMap<>();
		LinkedHashMap<String, String> sequences2 = new LinkedHashMap<>();
		// sequences1.put(">test1",
		// "CAACACGAGCTGACGACAGCCATGCAGCACCTGTCACCGGTCCAGCCGAACTGAAGGAATCCATCTCTGGAAACCGCGACC");
		// sequences1.put(">test2",
		// "CAACACGAGCTGACGA-------GCAGCACCTGTCACCGGTCCAGCCGAACTGAAGGAATCCATCTCTGGAAACCGCGACC");
		// sequences2.put(">test3",
		// "CATGACGACAGCCATGCCCTGTCTGACGACCCGTAAGGAATCCCCCCCCCCGAAACCGCGACC");

		sequences1
				.put(">test1",
						"ATAAGTCTGAAGTTAAAGGCTAGTCGCTCAACCATAGGTTCGCTTTGGAAACTGTCAAACTTGAGTGCAGAAGGAGGAGAGAAGGAATTCCATGTGTAGCGGTGAAATGCGTAGATATATGGAGGAACACCGGTGGCGAAAGCGGCTCTCTGGTCTGTAACTGACGCTGAGGCTCGAAAGCGTGGGGAGCGAACAGGATTAGATACCCTGGTAGTCCACGCCGTAAACGATGAGTGCTAGGTGTTGGATCCTTTCCGGGATTCAGTGCCGAAGCTAACGCATTAAGCACTCCGCCTGGGGAGTACGACCGCAAGGTTGAAACTCAAAGGAATTGACGGGGGCCCGCACAAGCGGTGGAGCATGTGGTTTAATTCGAAGCAACGCGAAGAACCTTACCAGGTCTTGACATCCCGATGCTATTTCTAGAGATAGAAAGTTACTTCGGTACATCGGTGACAGGTGGTGCATGGTTGTCGTCAGCTCGTGTCGTGAGATGTTGGGTTAAGTCCCGCAACGAGCGCAACCCCTATTGTTAGTTGCCATCATTCAGTTGGGCACTCTAGCGAGACTGCCGGTAATAAACCGGAGGAAGGTGGGGATGACGTCAAATCATCATGCCCCTTATGACCTGGGCTACACACGTGCTACAATGGTTGGTACAACGAGTTGCGAGTCGGTGACGGCGAGCTAATCTCTTAAAGCCAATCTCAGTTCGGATTGTAGGCTGCAACTCGCCTACATGAAGTCGGAATCGCTAGTAATCGCGGATCAGCACGCCCGGGTGGAATACGTTCCCGGGGCCTTGTACACACCGCCCGTCACACCACGAAGAGTTTGTAACACCCCGAAG");
		sequences2
				.put(">test3",
						"GGCCTGACGTTCCCGGACTATCTGCGCGTAAACGAGCGCACAGCCGATTGATAAGTCTGAAGTCATTGGCTGTGGCTCAACCTTAGGTGCGCTTTATAAACTGTCGAACTTGAGTGCAGAAGGAGGAGATAAGGAATTCCATGTGTAGCGGTGAAATGCGTAGATATATGGAGGAACACCGGTGGCGAAAGCGGCTCTCTGGTCTGTAACTGACGCTGAGGCTCGAAAGCGTGGGGAGCGAACAGGATTAGATACCCTGGTAGTCCACGCCGTAAACGATGAGTGCTAGGTGTTGGATCCTTTCCGGGATTCAGTGCCGCAGCTAACGCATTAAGCACTCCGCCTGGGGAGTACGACCGCAAGGTTGAAACTCAAAGGAATTGACGGGGGCCCGCACAAGCGGTGGAGCATGTGGTTTAATTCGAAGCAACGCGAAGAACCTTACCAGGTCTTGACATCCCGATGCTATTTCTAGAGATAGAAAGTTACTTCGGTACATCGGTGACAGGTGGTGCATGGTTGTCGTCAGCTCGTGTCGTGAGATGTTGGGTTAAGTCCCGCAACGAGCGCAACCCCTATTGTTAGTTGCCATCATTCAGTTGGGCACTCTAGCGAGACTGCCGGTAATAAACCGGAGGAAGGTGGGGATGACGTCAAATCATCATGCCCCTTATGACCTGGGCTACACACGTGCTACAATGGTTGGTACAACGAGTTGCGAGTCGGTGACGGCGAGCTAATCTCTTAAAGCCAATCTCAGTTCGGATTGTAGGCTGCAACTCGCCTACATGAAGTCGGAATCGCTAGTAATCGCGGATCACACGCCCGGTGAAAACCGTTTCCCCGGCCCT");

		AlignedSequences seq1 = new IdsMappedSequences(sequences1,
				SequencesType.DNA);
		AlignedSequences seq2 = new IdsMappedSequences(sequences2,
				SequencesType.DNA);
		ScoreMatrix mat = ScoreMatrixFactory
				.newInstance(ScoreMatricesType.IUB);

		Aligner al = new Aligner(AlignmentType.GLOBAL);
		al.setGep(0.1);
		al.setGop(10);
		al.setMatrix(mat);

		List<AlignedSequences> possibleAligned = al.align(seq1, seq2);

		for (AlignedSequences aligned : possibleAligned) {
			String[] ids = aligned.getIds();
			char[][] seq = aligned.getSequences();

			for (int i = 0; i < ids.length; i++) {
				// System.out.println(ids[i]);
				System.out.println(String.valueOf(seq[i]));
			}
			System.out.println();
		}

	}

}